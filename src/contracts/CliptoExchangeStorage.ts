/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CliptoExchangeStorageInterface extends utils.Interface {
  functions: {
    "beacon()": FunctionFragment;
    "creators(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "requests(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "beacon", values?: undefined): string;
  encodeFunctionData(functionFragment: "creators", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "beacon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;

  events: {};
}

export interface CliptoExchangeStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CliptoExchangeStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beacon(overrides?: CallOverrides): Promise<[string]>;

    creators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { nft: string; metadataURI: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, string] & {
        requester: string;
        nftReceiver: string;
        erc20: string;
        amount: BigNumber;
        fulfilled: boolean;
        metadataURI: string;
      }
    >;
  };

  beacon(overrides?: CallOverrides): Promise<string>;

  creators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { nft: string; metadataURI: string }>;

  owner(overrides?: CallOverrides): Promise<string>;

  requests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean, string] & {
      requester: string;
      nftReceiver: string;
      erc20: string;
      amount: BigNumber;
      fulfilled: boolean;
      metadataURI: string;
    }
  >;

  callStatic: {
    beacon(overrides?: CallOverrides): Promise<string>;

    creators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { nft: string; metadataURI: string }>;

    owner(overrides?: CallOverrides): Promise<string>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, string] & {
        requester: string;
        nftReceiver: string;
        erc20: string;
        amount: BigNumber;
        fulfilled: boolean;
        metadataURI: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    beacon(overrides?: CallOverrides): Promise<BigNumber>;

    creators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
