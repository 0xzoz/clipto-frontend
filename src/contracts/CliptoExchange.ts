/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CliptoExchangeInterface extends utils.Interface {
  functions: {
    'TOKEN_IMPLEMENTATION()': FunctionFragment;
    'creators(address)': FunctionFragment;
    'deliverRequest(uint256,string)': FunctionFragment;
    'modifyCreator(string,uint256)': FunctionFragment;
    'newRequest(address)': FunctionFragment;
    'refundRequest(address,uint256)': FunctionFragment;
    'registerCreator(string,string,uint256)': FunctionFragment;
    'requests(address,uint256)': FunctionFragment;
    'updateRequest(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'TOKEN_IMPLEMENTATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'creators', values: [string]): string;
  encodeFunctionData(functionFragment: 'deliverRequest', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'modifyCreator', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'newRequest', values: [string]): string;
  encodeFunctionData(functionFragment: 'refundRequest', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'registerCreator', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'requests', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateRequest', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'TOKEN_IMPLEMENTATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deliverRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'modifyCreator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refundRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerCreator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRequest', data: BytesLike): Result;

  events: {
    'CreatorModified(address,string,uint256)': EventFragment;
    'CreatorRegistered(address,string,uint256,address)': EventFragment;
    'DeliveredRequest(address,address,uint256,uint256)': EventFragment;
    'NewRequest(address,address,uint256,uint256)': EventFragment;
    'RefundedRequest(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CreatorModified'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatorRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DeliveredRequest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewRequest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RefundedRequest'): EventFragment;
}

export type CreatorModifiedEvent = TypedEvent<
  [string, string, BigNumber],
  { creator: string; profileUrl: string; cost: BigNumber }
>;

export type CreatorModifiedEventFilter = TypedEventFilter<CreatorModifiedEvent>;

export type CreatorRegisteredEvent = TypedEvent<
  [string, string, BigNumber, string],
  { creator: string; profileUrl: string; cost: BigNumber; tokenAddress: string }
>;

export type CreatorRegisteredEventFilter = TypedEventFilter<CreatorRegisteredEvent>;

export type DeliveredRequestEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { creator: string; requester: string; index: BigNumber; amount: BigNumber }
>;

export type DeliveredRequestEventFilter = TypedEventFilter<DeliveredRequestEvent>;

export type NewRequestEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { creator: string; requester: string; index: BigNumber; amount: BigNumber }
>;

export type NewRequestEventFilter = TypedEventFilter<NewRequestEvent>;

export type RefundedRequestEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { creator: string; requester: string; index: BigNumber; amount: BigNumber }
>;

export type RefundedRequestEventFilter = TypedEventFilter<RefundedRequestEvent>;

export interface CliptoExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CliptoExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOKEN_IMPLEMENTATION(overrides?: CallOverrides): Promise<[string]>;

    creators(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        profileUrl: string;
        cost: BigNumber;
        token: string;
      }
    >;

    deliverRequest(
      index: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    modifyCreator(
      profileUrl: string,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    newRequest(
      creator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    refundRequest(
      creator: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    registerCreator(
      creatorName: string,
      profileUrl: string,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        requester: string;
        amount: BigNumber;
        delivered: boolean;
        refunded: boolean;
      }
    >;

    updateRequest(
      creator: string,
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  TOKEN_IMPLEMENTATION(overrides?: CallOverrides): Promise<string>;

  creators(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, string] & {
      profileUrl: string;
      cost: BigNumber;
      token: string;
    }
  >;

  deliverRequest(
    index: BigNumberish,
    _tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  modifyCreator(
    profileUrl: string,
    cost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  newRequest(
    creator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  refundRequest(
    creator: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  registerCreator(
    creatorName: string,
    profileUrl: string,
    cost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  requests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, boolean, boolean] & {
      requester: string;
      amount: BigNumber;
      delivered: boolean;
      refunded: boolean;
    }
  >;

  updateRequest(
    creator: string,
    index: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    TOKEN_IMPLEMENTATION(overrides?: CallOverrides): Promise<string>;

    creators(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        profileUrl: string;
        cost: BigNumber;
        token: string;
      }
    >;

    deliverRequest(index: BigNumberish, _tokenURI: string, overrides?: CallOverrides): Promise<void>;

    modifyCreator(profileUrl: string, cost: BigNumberish, overrides?: CallOverrides): Promise<void>;

    newRequest(creator: string, overrides?: CallOverrides): Promise<void>;

    refundRequest(creator: string, index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    registerCreator(
      creatorName: string,
      profileUrl: string,
      cost: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    requests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        requester: string;
        amount: BigNumber;
        delivered: boolean;
        refunded: boolean;
      }
    >;

    updateRequest(creator: string, index: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'CreatorModified(address,string,uint256)'(
      creator?: string | null,
      profileUrl?: string | null,
      cost?: null,
    ): CreatorModifiedEventFilter;
    CreatorModified(creator?: string | null, profileUrl?: string | null, cost?: null): CreatorModifiedEventFilter;

    'CreatorRegistered(address,string,uint256,address)'(
      creator?: string | null,
      profileUrl?: string | null,
      cost?: null,
      tokenAddress?: null,
    ): CreatorRegisteredEventFilter;
    CreatorRegistered(
      creator?: string | null,
      profileUrl?: string | null,
      cost?: null,
      tokenAddress?: null,
    ): CreatorRegisteredEventFilter;

    'DeliveredRequest(address,address,uint256,uint256)'(
      creator?: string | null,
      requester?: string | null,
      index?: null,
      amount?: null,
    ): DeliveredRequestEventFilter;
    DeliveredRequest(
      creator?: string | null,
      requester?: string | null,
      index?: null,
      amount?: null,
    ): DeliveredRequestEventFilter;

    'NewRequest(address,address,uint256,uint256)'(
      creator?: string | null,
      requester?: string | null,
      index?: null,
      amount?: null,
    ): NewRequestEventFilter;
    NewRequest(creator?: string | null, requester?: string | null, index?: null, amount?: null): NewRequestEventFilter;

    'RefundedRequest(address,address,uint256,uint256)'(
      creator?: string | null,
      requester?: string | null,
      index?: null,
      amount?: null,
    ): RefundedRequestEventFilter;
    RefundedRequest(
      creator?: string | null,
      requester?: string | null,
      index?: null,
      amount?: null,
    ): RefundedRequestEventFilter;
  };

  estimateGas: {
    TOKEN_IMPLEMENTATION(overrides?: CallOverrides): Promise<BigNumber>;

    creators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deliverRequest(
      index: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    modifyCreator(
      profileUrl: string,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    newRequest(creator: string, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    refundRequest(
      creator: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    registerCreator(
      creatorName: string,
      profileUrl: string,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    requests(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateRequest(
      creator: string,
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_IMPLEMENTATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creators(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deliverRequest(
      index: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    modifyCreator(
      profileUrl: string,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    newRequest(
      creator: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    refundRequest(
      creator: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    registerCreator(
      creatorName: string,
      profileUrl: string,
      cost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    requests(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateRequest(
      creator: string,
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
